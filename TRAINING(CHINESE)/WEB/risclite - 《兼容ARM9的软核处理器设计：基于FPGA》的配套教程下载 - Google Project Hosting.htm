<!DOCTYPE html>
<!-- saved from url=(0034)http://code.google.com/p/risclite/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
 
 <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link rel="icon" type="image/vnd.microsoft.icon" href="http://www.gstatic.com/codesite/ph/images/phosting.ico">
 
 
 <script type="text/javascript" async="" src="https://apis.google.com/js/plusone.js"></script><script type="text/javascript">
 
 
 
 
 var codesite_token = null;
 
 
 var CS_env = {"profileUrl":null,"token":null,"assetHostPath":"http://www.gstatic.com/codesite/ph","domainName":null,"assetVersionPath":"http://www.gstatic.com/codesite/ph/7512473178023540559","projectHomeUrl":"/p/risclite","relativeBaseUrl":"","projectName":"risclite","loggedInUserEmail":null};
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 
 </script><script type="text/javascript" async="" src="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/ga.js"></script>
 
 
 <title>
 risclite -
 
 
 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting
 </title>
 <link type="text/css" rel="stylesheet" href="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/core.css">
 
 <link type="text/css" rel="stylesheet" href="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/ph_detail.css">
 
 
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/7512473178023540559/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 
 .activity-level-High {
 background:no-repeat url(http://www.gstatic.com/codesite/ph/images/activity-level.png) 0 0;
 width: 16px;
 height: 16px;
 }
 .activity-level-Low {
 background:no-repeat url(http://www.gstatic.com/codesite/ph/images/activity-level.png) 0 -16px;
 width: 16px;
 height: 16px;
 }
 .activity-level-Medium {
 background: no-repeat url(http://www.gstatic.com/codesite/ph/images/activity-level.png) -16px 0;
 width: 16px;
 height: 16px;
 }
 .activity-level-None {
 background:no-repeat url(http://www.gstatic.com/codesite/ph/images/activity-level.png) -16px -16px;
 width: 16px;
 height: 16px;
 }

 .psicon-container {
 min-width:24px;
 }

 
 </style>
</head>
<body class="t1">
<script type="text/javascript">
 window.___gcfg = {lang: 'en'};
 (function() 
 {var po = document.createElement("script");
 po.type = "text/javascript"; po.async = true;po.src = "https://apis.google.com/js/plusone.js";
 var s = document.getElementsByTagName("script")[0];
 s.parentNode.insertBefore(po, s);
 })();
</script>
<div class="headbg">

 <div id="gaia">
 

 <span>
 
 <a href="http://code.google.com/p/risclite/#" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>▼</small></a>
 | <a href="https://www.google.com/accounts/ServiceLogin?service=code&ltmpl=phosting&continue=http%3A%2F%2Fcode.google.com%2Fp%2Frisclite%2F&followup=http%3A%2F%2Fcode.google.com%2Fp%2Frisclite%2F" onclick="_CS_click(&#39;/gb/ph/signin&#39;);"><u>Sign in</u></a>
 
 </span>

 </div>

 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if lte IE 7]>
<div style="text-align:center;">
Your version of Internet Explorer is not supported. Try a browser that
contributes to open source, such as <a href="http://www.firefox.com">Firefox</a>,
<a href="http://www.google.com/chrome">Google Chrome</a>, or
<a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>.
</div>
<![endif]-->



 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0" itemscope="" itemtype="http://schema.org/CreativeWork">
 <tbody><tr style="height: 58px;">
 
 <td id="plogo">
 <link itemprop="url" href="http://code.google.com/p/risclite">
 <a href="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting.htm">
 
 <img src="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/defaultlogo.png" alt="Logo" itemprop="image">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting.htm"><span itemprop="name">risclite</span></a>
 </div>
 
 <div id="psum">
 <a id="project_summary_link" href="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting.htm"><span itemprop="description">《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载</span></a>
 
 </div>
 
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="http://code.google.com/hosting/search">
 <input size="30" name="q" value="" type="text">
 
 <input type="submit" name="projectsearch" value="Search projects">
 </form>
 
 </td></tr>
 </tbody></table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting.htm" class="tab active">Project&nbsp;Home</a>
 
 
 
 
 <a href="http://code.google.com/p/risclite/downloads/list" class="tab ">Downloads</a>
 
 
 
 
 
 <a href="http://code.google.com/p/risclite/w/list" class="tab ">Wiki</a>
 
 
 
 
 
 <a href="http://code.google.com/p/risclite/issues/list" class="tab ">Issues</a>
 
 
 
 
 
 <a href="http://code.google.com/p/risclite/source/checkout" class="tab ">Source</a>
 
 
 
 
 
 
 
 <div class="gtbc"></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tbody><tr>
 
 
 
 
 
 
 
 
 <td class="subt">
 <div class="st1">
 <div class="isf">
 <span class="inst1">
 <a href="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting.htm">Summary</a>
 </span>
 
 
 
 &nbsp;
 <span class="inst3">
 <a href="http://code.google.com/p/risclite/people/list">People</a>
 </span>
 
 
 </div>
</div>

 </td>
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</tbody></table>


<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>
<div id="maincol">

 
<!-- IE -->





<table width="100%">
 <tbody><tr class="pscontent">
 <td class="pscolumnl">
 
 <div class="phead">Project Information</div>
 
 
 <div class="psicon" style="min-height:23px">
 <g:plusone size="small" annotation="inline" width="180"></g:plusone>
 </div>
 
 
 <ul class="pslist">
 
 
 
 <li class="psmeta">
 <a href="http://code.google.com/p/risclite/feeds">Project feeds</a>
 </li>
 
 <li class="psgap">
 
 
 
 </li><li class="psmeta"><b>Code license</b></li>
 <li class="psmeta">
 <a href="http://www.gnu.org/licenses/gpl.html" rel="nofollow">GNU GPL v3</a>
 
 </li>
 <li class="psgap">
 
 
 
 
 
 
 </li><li class="psmeta">
 <span id="project_labels">
 <b>Labels</b><br>
 
 <a class="label" href="http://code.google.com/hosting/search?q=label:ARM">ARM</a>
 
 </span>
 </li>
 <li class="psgap">
 
 
 </li></ul>
 <div class="psicon">
 <div class="psicon-container goog-inline-block">
 <div style="float:right" class="SPRITE_people-y16 goog-inline-block vt"></div>
 </div>
 <span><b>Members</b></span>
 </div>
 <ul class="pslist">
 
 
 
 <a style="white-space: nowrap" href="http://code.google.com/u/113283380744521329920/">riscl...@gmail.com</a>, 
 
 <a style="white-space: nowrap" href="http://code.google.com/u/114147670500272138441/">qiang0...@gmail.com</a>
 
 
 
 
 <li class="psgap">
 
 
 </li></ul>
 
 
 
 
 <div class="phead">Links</div>
 <ul class="pslist" style="white-space:nowrap">
 
 <li class="psmeta"><b>Blogs</b></li>
 
 <li class="psmeta">
 <a href="http://www.risclite.com/" rel="nofollow">RISClite</a>
 </li>
 
 <li class="psgap">
 
 
 </li><li class="psmeta"><b>External links</b></li>
 
 <li class="psmeta">
 <a href="http://www.socvista.com/bbs" rel="nofollow">SoCVista论坛</a>
 </li>
 
 <li class="psgap">
 
 
 </li></ul>
 
 </td>
 <td id="wikicontent" class="psdescription">
 <p>本项目为一本关于FPGA设计的书——《兼容ARM9的软核处理器设计：基于FPGA》提供配套教程下载。该书由机械工业出版社华章分社出版。读者可以在这里找到书中对应的设计文件。 </p><p><img src="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/cover.jpg"> </p><h1><a name="第一章:_数字电路设计模型"></a><strong>第一章: 数字电路设计模型</strong><a href="http://code.google.com/p/risclite/#第一章:_数字电路设计模型" class="section_anchor"></a></h1><p><i>本章主要讲述数字电路设计的基本模型。在进行数字电路设计之前，必须建立一个数字电路模型。这个建模的过程，就是在心中建立一个电路的基本轮廓。在了解了数字电路的基本单元后，运用它们构建大致模型。</i> </p><ol><li><i>最初的模型——带有输入输出的模块</i> </li><li><i>组合逻辑</i> </li><li><i>时序逻辑</i> </li><li><i>同步电路</i> </li><li><i>同步电路时序路径</i> </li><li><i>RTL描述</i> </li><li><i>综合生成电路</i> </li></ol><p>这一章建立数字电路设计的基本概念，是非常基础性的内容，无下载文件。 </p><h1><a name="第二章：Verilog_RTL编程"></a><strong>第二章：Verilog RTL编程</strong><a href="http://code.google.com/p/risclite/#第二章：Verilog_RTL编程" class="section_anchor"></a></h1><p><i>本章讲述如何使用Verilog进行RTL编程，讲述如何使用Verilog精炼的进行RTL描述。在对Verilog的描述方法进行了基本归类后，总结了进行RTL设计的基本流程，并在最后，使用一个简单的UART串口设计实例来启发读者完成RTL设计。</i> </p><ol><li><i>Verilog语言与RTL描述</i> </li><li><i>Verilog描述语句对应电路</i> </li><li><i>如何进行RTL设计</i> </li><li><i>RTL设计要点</i> </li><li><i>UART串口通讯设计实例</i> </li></ol><p>本章使用Verilog设计了一个简单高效的UART控制器。作者已经对它进行了参数化。读者只需要在例化时，指出串口的波特率（波特/秒），以及开发板的工作频率（兆赫兹），即可用在自己的设计当中。下面就是它的例化方式，从这段参数化可以理解设计的参数：它支持的波特率是9600波特/秒，rxtx.v的clk端口的时钟频率是25 MHz。 </p><pre class="prettyprint"><span class="pln">rxtx <br>&nbsp;</span><span class="com"># ( .baud ( 9600 ),</span><span class="pln"><br>&nbsp; &nbsp; &nbsp;</span><span class="pun">.</span><span class="pln">mhz &nbsp;</span><span class="pun">(</span><span class="pln"> </span><span class="lit">25</span><span class="pln"> &nbsp; </span><span class="pun">)</span><span class="pln"> &nbsp;<br></span><span class="pun">)</span><span class="pln"><br>u_rxtx </span><span class="pun">(</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">);</span><span class="pln"> </span></pre><p>它的下载方式：<a href="http://risclite.googlecode.com/files/rxtx.v" rel="nofollow">rxtx.v</a>   </p><p>这段串口控制器的Verilog RTL代码只有简单的100来行，非常简单实用，适于在开发板上调试使用。推荐各位读者在理解它的功能的基础上进行修改，一定会让你用开发板进行串口调试时更加得心应手。 </p><p>这个rxtx.v现在支持的配置方式是：8 bit数据位，1 bit奇偶校验位，它的奇偶校验方式偶校验，以及1 bit的停止位。读者在配置PC端的控制终端时，可以按照上面的描述去配置。也可以修改代码以满足你特定的需求。 </p><h1><a name="第三章：Modelsim仿真"></a><strong>第三章：Modelsim仿真</strong><a href="http://code.google.com/p/risclite/#第三章：Modelsim仿真" class="section_anchor"></a></h1><p><i>本章讲述如何使用Modelsim对Verilog RTL设计进行仿真验证。验证是设计中重要的一步，Modelsim是最流行的仿真工具，使用Modelsim建立一个测试环境可以对RTL设计进行各种级别的验证测试。</i> </p><ol><li><i>仿真的意义</i> </li><li><i>testbench文件</i> </li><li><i>Modelsim仿真工具使用</i> </li><li><i>UART串口仿真实例</i> </li></ol><p>本章讲述如何使用Modelsim进行设计仿真。但也可以使用开源的iVerilog仿真工具完成。它的下载方式是：<a href="http://bleyer.org/icarus/" rel="nofollow">iVerilog下载页</a>。读者在安装完毕后，下载本章设计的tb.v和rxtx.v，链接是：<a href="http://risclite.googlecode.com/files/uart.zip" rel="nofollow">uart.zip</a>。在解压缩某个目录，例如D:\sim下后。在windows的“开始”下面，点击“运行”，然后输入cmd，点击确定。在cmd页面内，输入命令："D:"，以及"cd sim"进入解压缩目录。 </p><p>如果安装正确的话，只需要输入：iverilog tb.v rxtx.v -o run，就会生成一个可执行的仿真文件：run。然后，输入vvp run，即可让刚刚生成的run进行执行，那么tb.v里面的打印语句就会在cmd窗口中输出。 </p><p>如果你想生成波形，很简单，打开tb.v，在endmodule语句前面加上： </p><pre class="prettyprint"><span class="pln">initial<br></span><span class="kwd">begin</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; $dumpfile</span><span class="pun">(</span><span class="str">"tb.lxt2"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; $dumpvars</span><span class="pun">(</span><span class="lit">0</span><span class="pun">);</span><span class="pln"><br></span><span class="kwd">end</span></pre><p>然后保存tb.v。重新运行iverilog tb.v rxtx.v -o run，重新得到run文件。然后运行vvp run -lxt2，那么就得到lxt2格式的波形文件：tb.lxt2。最后在cmd窗口中，运行gtkwave tb.lxt2，就可以进入波形观察窗口，拉入自己想要的信号，仔细分析吧。具体也可以参照博文：<a href="http://hi.baidu.com/yuhuntero/blog/item/90a199a4088d56f09152eec6.html" rel="nofollow">使用iverilog+gtkwave学习Verilog HDL</a> </p><h1><a name="第四章：FPGA开发板原型验证"></a><strong>第四章：FPGA开发板原型验证</strong><a href="http://code.google.com/p/risclite/#第四章：FPGA开发板原型验证" class="section_anchor"></a></h1><p><i>本章主要讲述如何使用FPGA开发板对设计进行原型验证。FPGA开发板作为数字设计运行的实体，具有实践出真理的价值。掌握FPGA开发板对设计进行验证，对于设计者无比重要。</i> </p><ol><li><i>FPGA内部结构</i> </li><li><i>FPGA开发板</i> </li><li><i>FPGA设计开发流程</i> </li><li><i>FPGA设计内部单元</i> </li><li><i>UART设计在Altera FPGA的下载执行</i> </li><li><i>UART设计在Xilinx FPGA的下载执行</i> </li></ol><p>这一章有两个FPGA开发板运行的工程。一个针对Altera的DE2-115开发板，一个是Digilent的Starter kit开发板。这里提供的运行例程，只针对作者手头的<a href="http://www.digilentchina.com/product-more.asp?ClassId=1&Unid=166" rel="nofollow">Digilent公司的Nexys3开发板</a>。这两个工程都会用到串口终端。读者当然可以使用xp系统自带的“超级终端”，但很多win7用户或觉得“超级终端”不给力的，可以下载作者提供的一个简单易用的串口终端软件：<a href="http://risclite.googlecode.com/files/MiniComm.exe" rel="nofollow">迷你终端</a>。(注：在进行串口设置时，建议将“流量控制”设为“无”) </p><p>第一个FPGA开发板工程，使用前面两章的串口控制器，把接收到的数据+1后，发送回串口中。在书中使用的是Altera公司的DE2-115开发板。这里提供的是：<a href="http://risclite.googlecode.com/files/chapter41.zip" rel="nofollow">Nexys3开发板的工程数据包</a>。 </p><p>第二个FPGA开发板工程，会把“迷你终端”发送的数据，保存入FPGA内部的Block RAM内，在开发者按动某个按钮后，顺序把保存的数据通过串口回送入“迷你终端”。在书中使用的是Digilent的starter kit开发板。这里提供的是：<a href="http://risclite.googlecode.com/files/chapter42.zip" rel="nofollow">Nexys3开发板的工程数据包</a>。 </p><h1><a name="第五章：ARM9微处理器编程模型"></a><strong>第五章：ARM9微处理器编程模型</strong><a href="http://code.google.com/p/risclite/#第五章：ARM9微处理器编程模型" class="section_anchor"></a></h1><p><i>本章主要对ARM9处理器架构进行介绍，使读者对ARMv4这一套运行在众多智能手机上的流行架构有个切实的了解。本章从建立微处理器的基本模型开始，从实现的角度对ARMv4架构的方方面面进行了探讨。在总结出了7种中断和20条指令后，对于下一章执行做了全面的总结和铺垫。</i> </p><ol><li><i>ARM公司历史</i> </li><li><i>ARM处理器架构</i> </li><li><i>微处理器基本模型</i> </li><li><i>ARMv4架构模式</i> </li><li><i>ARMv4架构内部寄存器</i> </li><li><i>ARMv4架构的异常中断</i> </li><li><i>ARMv4的架构支持的ARM指令集</i> </li><li><i>ARM指令与中断分析</i> </li></ol><p>这里提供ARMv4的指令集对照表(excel格式）。读者可以对指令集的区分一目了然，下载地址：<a href="http://risclite.googlecode.com/files/arm9.xls" rel="nofollow">arm9.xls</a>。 </p><h1><a name="第六章：兼容ARM9微处理器Verilog_RTL设计"></a><strong>第六章：兼容ARM9微处理器Verilog RTL设计</strong><a href="http://code.google.com/p/risclite/#第六章：兼容ARM9微处理器Verilog_RTL设计" class="section_anchor"></a></h1><p><i>本章是本书的核心。讲述了如何在不到1800行的verilog程序里，去实现上一章总结的ARMv4的架构。从现在经典的三级流水线和五级流水线开，对如何有效的实现处理器描述做了全面展开。以此为基础，逐步对兼容ARM9微处理器进行剖析，让读者从处理器内核的实现过程中，学习到Verilog RTL设计的各种技巧。</i> </p><ol><li><i>确定RTL设计的输入输出端口</i> </li><li><i>经典的三级流水线架构</i> </li><li><i>经典的五级流水线架构</i> </li><li><i>三级流水线改进架构</i> </li><li><i>适于兼容ARM9微处理器的三级架构</i> </li><li><i>影响流水线架构执行的四种状况</i> </li><li><i>第一级：取指阶段的Verilog RTL实现</i> </li><li><i>第二级：乘法运算阶段的Verilog RTL实现</i> </li><li><i>第三级：加法运算阶段的Verilog RTL实现</i> </li><li><i>寄存器组的写入</i> </li><li><i>CPSR/SPSR的写入</i> </li><li><i>数据池的读写</i> </li><li><i>第四级：读操作数据的回写</i> </li></ol><p>这里提供这一章设计的Verilog RTL代码下载：<a href="http://risclite.googlecode.com/files/arm9_compatiable_code.v" rel="nofollow">兼容ARM9软核处理器Verilog RTL代码</a> </p><h1><a name="第七章：Hello_world--兼容ARM9处理器内核运行的第��"></a><strong>第七章：Hello world--兼容ARM9处理器内核运行的第一个程序</strong><a href="http://code.google.com/p/risclite/#第七章：Hello_world--兼容ARM9处理器内核运行的第��" class="section_anchor"></a></h1><p><i>本章介绍简单的ROM code生成流程，并让它在兼容ARM9处理器内核上运行。KEIL是嵌入式开发中流行的工具，它的后续RealView MDK也因为它良好的特性受到嵌入式设计工程师的欢迎。本章帮助读者编写简单的printf("Hello world")打印程序，以此为契机，建立简单的SoC设计工程。</i> </p><ol><li><i>基于FPGA的SoC设计流程</i> </li><li><i>使用<tt>RealView</tt> MDK编译Hello World程序</i> </li><li><i>Modelsim仿真输出Hello World</i> </li><li><i>建立Hello World的FPGA设计工程</i> </li></ol><p>这一章使用ARM公司的<a href="http://www.keil.com/arm/mdk.asp" rel="nofollow">Keil RealView MDK</a>作为嵌入式软件开发工具。读者只需在<a href="https://www.keil.com/arm/demo/eval/arm.htm" rel="nofollow">评估版下载页面</a>上填写个人信息，即可下载该软件的评估版，可以产生小于32 KB大小的ROM code。 </p><p>在安装完毕Keil <tt>RealView</tt> MDK后，在安装目录下，会找到examples目录。在这个目录里面，会有Hello子目录，里面放着一个简单的hello world打印项目。读者可以从<a href="http://risclite.googlecode.com/files/Hello_pre.zip" rel="nofollow">这里</a>下载。读者可以按照书中的指导，对hello项目进行修改，也可以在这里直接下载修改后的<a href="http://risclite.googlecode.com/files/Hello_pro.zip" rel="nofollow">Hello项目</a>。 </p><p>在准备了ROM code后，我们进入仿真阶段。书中采用的是Modelsim作为仿真工具，这里却使用前面提到的iVerilog开源仿真工具。读者下载<a href="http://risclite.googlecode.com/files/sim_hello.zip" rel="nofollow">仿真包</a>，里面包含了两个简单的文件：tb.v和arm9_compatiable_code.v。读者需要打开tb.v，对里面的<tt>parameter BINFILE = "D:/keil/Hello/Obj/hello.bin";</tt>语句进行修改，使得仿真获取的bin文件指向读者在hello目录下生成的hello.bin。 </p><p>修改tb.v结束后，打开cmd界面，进入sim_hello.zip的解压缩目录。然后运行：<tt>iverilog tb.v arm9_compatiable_code.v -o run</tt>；最后运行<tt>vvp run</tt>，即可见到打印出hello world字样。由于tb.v里没有自动结束语句，读者需要输入ctrl+C键，然后输入finish，强制结束。读者接下来要做的是，对hello工程的源文件hello.c进行修改，打印出你想要的字符串。在Keil <tt>RealView</tt> MDK进行重编译后，只需运行<tt>vvp run</tt>，即可打印出你想要的字符串。接下来，读者可以按照书中的指导，使得仿真支持中断，这里，不再提供参考。 </p><p>如果你能够进行仿真，那么在FPGA开发板上执行将是顺理成章、水到渠成的事情了。这里，提供在Nexys3开发板上的例子，它是上面仿真的翻版。在这个例子里，采用了Block RAM作为ROM和RAM，使用前面开发的串口程序。读者可以下载这个FPGA工程，作为你在FPGA开发板上执行打印hello world的一个参考。下载地址：<a href="http://risclite.googlecode.com/files/chapter7.zip" rel="nofollow">hello world在Nexys3开发板上的例程</a>。建议读者在这个例子的基础上逐步增加一些自己的东西，例如中断的执行，打印一些其他异常符号等等。 </p><h1><a name="第八章：Dhrystone_Benchmark--兼容ARM9处理器内核性能"></a><strong>第八章：Dhrystone Benchmark--兼容ARM9处理器内核性能测试</strong><a href="http://code.google.com/p/risclite/#第八章：Dhrystone_Benchmark--兼容ARM9处理器内核性能" class="section_anchor"></a></h1><p><i>Dhrystone Benchmark是为各种嵌入式内核测试“体质”的代码。本章结合ARM公司给出的优化方法，使用<tt>RealView</tt> MDK对Dhrystone 2.1代码进行编译。然后使用Modelsim进行仿真，并用FPGA开发板结合串口，打印出真实的测试结果。</i> </p><ol><li><i>Dhrystone 2.1介绍</i> </li><li><i>移植Dhrystone 2.1进行编译</i> </li><li><i>Modelsim仿真运行Dhrystone Benchmark</i> </li><li><i>在线可编程的FPGA SoC设计工程</i> </li><li><i>Dhrystone Benchmark在开发板中运行</i> </li></ol><p>同上一章一样，本章也将使用Keil <tt>RealView</tt> MDK自带的Dhrystone 2.1测试项目，对兼容ARM9软核处理器进行测试。读者可以再这里下载<a href="http://risclite.googlecode.com/files/DHRY_pre.zip" rel="nofollow">DHRY的源项目</a>。然后，按照书中的指导，对它进行修改，让它更加适于兼容ARM9软核处理器，也可直接在这里下载<a href="http://risclite.googlecode.com/files/DHRY_pro.zip" rel="nofollow">修改后的DHRY项目</a>。 </p><p>在编译了软件后，读者可以按照上一章的方法对它进行仿真。仿真文件包里面包含了一个tb.v，以及arm9_compatiable_code.v，它的下载方式：<a href="http://risclite.googlecode.com/files/sim_dhry.zip" rel="nofollow">DHRY仿真包</a>。使用iverilog仿真软件对该仿真包进行仿真，可能需要十来分钟。最后的DMIPS/MHz结果，也会随着Keil的版本不同而不同。例如，作者采用最新的Keil 4.23版，将得到Dhrystone 2.1的DMIPS/MHz结果为：1.16 DMIPS/MHz。在写作此书时，作者采用的是4.10版本，那时的DMIPS/MHz结果为：1.21 DMIPS/MHz。 </p><p>同上一章一样，经过仿真以后，在FPGA开发板上重现这一测试过程。作者给出一个参考例程：<a href="http://risclite.googlecode.com/files/chapter8.zip" rel="nofollow">Nexys3开发板上的Dhrystone 2.1测试项目</a>。 </p><h1><a name="第九章：ucLinux仿真--结合Skyeye，启动不带MMU的操�"></a><strong>第九章：ucLinux仿真--结合Skyeye，启动不带MMU的操作系统</strong><a href="http://code.google.com/p/risclite/#第九章：ucLinux仿真--结合Skyeye，启动不带MMU的操�" class="section_anchor"></a></h1><p><i>Skyeye是ARM9处理器的软件模拟器，通过它解析ucLinux内核，可以在软件平台上运行嵌入式软件。本章建立了Modelsim的仿真环境，加载同样的ucLinux内核，可以打印出同Skyeye一样的启动信息。在这个过程中，用户可以通过查看波形，从RTL设计工程师的角度解析嵌入式操作系统。</i> </p><ol><li><i>ARM7TDMI-S处理器内核</i> </li><li><i>以ARM7TDMI为核心的单片机</i> </li><li><i>uClinux嵌入式操作系统</i> </li><li><i><tt>SkyEye</tt>硬件模拟平台</i> </li><li><i>Modelsim下仿真uClinux启动过程</i> </li></ol><p>本章将在仿真器中启动uClinux操作系统。这个启动过程以软件模拟器<a href="http://www.skyeye.org/" rel="nofollow">SkyEye</a>为参考，整个仿真包已经发布在网上了，下面是链接地址：<a href="http://arm-cpu-core.googlecode.com/files/uclinux.rar" rel="nofollow">uClinux仿真包</a>。 </p><h1><a name="第十章：Linux_OS--结合mini2440开发板，启动带MMU的�"></a><strong>第十章：Linux OS--结合mini2440开发板，启动带MMU的嵌入式操作系统</strong><a href="http://code.google.com/p/risclite/#第十章：Linux_OS--结合mini2440开发板，启动带MMU的�" class="section_anchor"></a></h1><p><i>Mini2440 ARM9开发板是一种流行的嵌入式开发工具。本章从开发板中得到含有操作系统及文件系统的NAND flash的镜像，然后在Modelsim下建立testbench环境，从该镜像中读出bootloader的第一条指令开始，一步步的启动Linux操作系统。这个过程涉及到带MMU功能模块的处理器的工作机理，读者在本章中可以了解到Linux操作系统的硬件工作环境。</i> </p><ol><li><i>ARM920T处理器内核</i> </li><li><i>S3C2440A 32-bit微控制器</i> </li><li><i>Mini2440 ARM9开发板</i> </li><li><i>NAND flash仿真模型</i> </li><li><i>为兼容ARM9处理器内核增加协处理器指令</i> </li><li><i>建立仿真Linux操作系统的testbench</i> </li></ol><p>Mini2440是由广州友善之臂计算机科技有限公司推出的一块<a href="http://www.arm9.net/mini2440.asp" rel="nofollow">基于ARM9的开发板</a>。本章完全参照它的启动过程。仿真包也已经发布在网上，下载地址是：<a href="http://arm-cpu-core.googlecode.com/files/linux.rar" rel="nofollow">Linux操作系统仿真包</a>。 </p><p>谢谢大家购买我的书！希望大家学习愉快！ </p>
 </td>
 </tr>
</tbody></table>
<script src="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/prettify_core_compiled.js"></script>
<script type="text/javascript">
 prettyPrint();
</script>

 
 
 
 <script type="text/javascript" src="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/ph_core.js"></script>
 
 
 
 
 <script type="text/javascript" src="./risclite - 《兼容ARM9的软核处理器设计：基于FPGA》的配套教程下载 - Google Project Hosting_files/codesite_product_dictionary_ph.pack.04102009.js"></script>
</div> 
<div id="footer" dir="ltr">
 <div class="text">
 <a href="http://code.google.com/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="http://code.google.com/p/support/">Project Hosting Help</a>
 </div>
</div>
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>
 
 


 
 


<div class="menuDiv instance0" id="menuDiv-projects-dropdown" style="position: absolute; display: none; top: 19px; left: 1113px; "><div class="menuCategory controls first"><a class="menuItem" style="display: block; " href="http://www.google.com/accounts/ServiceLogin?service=code&ltmpl=phosting&continue=http%3A%2F%2Fcode.google.com%2Fp%2Frisclite%2F&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Frisclite%2F">Sign in to see your favorites</a><hr class="menuSeparator"><a class="menuItem" style="display: block; " href="http://code.google.com/more/">Find developer products...</a><a class="menuItem" style="display: block; " href="http://code.google.com/hosting/">Find open source projects...</a></div></div></body></html>